<templateSet group="user">
  <template name="rulz" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;com.airhacks.rulz&lt;/groupId&gt;&#10;    &lt;artifactId&gt;jaxrsclient&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Rulez Test Framework" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jerseyclient" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;&#10;    &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;&#10;    &lt;version&gt;2.12&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Jersey Client Dependency" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="arquillianDM" value="&lt;dependencyManagement&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.jboss.arquillian&lt;/groupId&gt;&#10;            &lt;artifactId&gt;arquillian-bom&lt;/artifactId&gt;&#10;            &lt;version&gt;1.1.10.Final&lt;/version&gt;&#10;            &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;type&gt;pom&lt;/type&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/dependencyManagement&gt;" description="Arquillian DependencyManagement" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="arquillian" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;org.jboss.arquillian.junit&lt;/groupId&gt;&#10;    &lt;artifactId&gt;arquillian-junit-container&lt;/artifactId&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;org.jboss.arquillian.graphene&lt;/groupId&gt;&#10;    &lt;artifactId&gt;arquillian-graphene&lt;/artifactId&gt;&#10;    &lt;type&gt;pom&lt;/type&gt;&#10;    &lt;version&gt;2.1.0.Alpha3&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Arquillian Dependencies" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jmeterplugin" value="&lt;plugin&gt;&#10;  &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;&#10;  &lt;artifactId&gt;jmeter-maven-plugin&lt;/artifactId&gt;&#10;  &lt;version&gt;2.0.3&lt;/version&gt;&#10;  &lt;configuration&gt;&#10;    &lt;propertiesUser&gt;&#10;      &lt;host&gt;${performancetest.webservice.host}&lt;/host&gt;&#10;      &lt;port&gt;${performancetest.webservice.port}&lt;/port&gt;&#10;    &lt;/propertiesUser&gt;&#10;  &lt;/configuration&gt;&#10;  &lt;executions&gt;&#10;    &lt;execution&gt;&#10;      &lt;id&gt;jmeter-tests&lt;/id&gt;&#10;      &lt;goals&gt;&#10;        &lt;goal&gt;jmeter&lt;/goal&gt;&#10;      &lt;/goals&gt;&#10;    &lt;/execution&gt;&#10;  &lt;/executions&gt;&#10;&lt;/plugin&gt;&#10;&lt;plugin&gt;&#10;  &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;&#10;  &lt;artifactId&gt;jmeter-analysis-maven-plugin&lt;/artifactId&gt;&#10;  &lt;version&gt;1.0.6&lt;/version&gt;&#10;  &lt;executions&gt;&#10;    &lt;execution&gt;&#10;      &lt;goals&gt;&#10;        &lt;goal&gt;analyze&lt;/goal&gt;&#10;      &lt;/goals&gt;&#10;      &lt;phase&gt;post-integration-test&lt;/phase&gt;&#10;    &lt;/execution&gt;&#10;  &lt;/executions&gt;&#10;  &lt;configuration&gt;&#10;    &lt;source&gt;${project.build.directory}/jmeter/results/*&lt;/source&gt;&#10;    &lt;targetDirectory&gt;${project.build.directory}/reports&lt;/targetDirectory&gt;&#10;  &lt;/configuration&gt;&#10;&lt;/plugin&gt;" description="JMeter Plugins" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jmeterproperties" value="&lt;performancetest.webservice.host&gt;localhost&lt;/performancetest.webservice.host&gt;&#10;&lt;performancetest.webservice.port&gt;8282&lt;/performancetest.webservice.port&gt;" description="JMeter Properties" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="starttestenv" value="var FileWriter = Java.type(&quot;java.io.FileWriter&quot;);&#10;&#10;var version = $ENV.VERSION;&#10;var name = &quot;cars-test&quot;;&#10;var image = &quot;team1.disruptor.ninja:30500/robertbrem/cars:&quot; + version;&#10;var replicas = 1;&#10;var port = 8080;&#10;var nodePort = 31080;&#10;var deploymentFileName = &quot;deployment.yml&quot;;&#10;var serviceFileName = &quot;service.yml&quot;;&#10;var kubectl = $ENV.KUBECTL;&#10;&#10;var deleteDeployment = kubectl + &quot; delete deployment &quot; + name;&#10;print(deleteDeployment);&#10;$EXEC(deleteDeployment);&#10;print($OUT);&#10;print($ERR);&#10;&#10;var dfw = new FileWriter(deploymentFileName);&#10;dfw.write(&quot;apiVersion: extensions/v1beta1\n&quot;);&#10;dfw.write(&quot;kind: Deployment\n&quot;);&#10;dfw.write(&quot;metadata:\n&quot;);&#10;dfw.write(&quot;  name: &quot;+name+&quot;\n&quot;);&#10;dfw.write(&quot;spec:\n&quot;);&#10;dfw.write(&quot;  replicas: &quot;+replicas+&quot;\n&quot;);&#10;dfw.write(&quot;  template:\n&quot;);&#10;dfw.write(&quot;    metadata:\n&quot;);&#10;dfw.write(&quot;      labels:\n&quot;);&#10;dfw.write(&quot;        name: &quot;+name+&quot;\n&quot;);&#10;dfw.write(&quot;    spec:\n&quot;);&#10;dfw.write(&quot;      containers:\n&quot;);&#10;dfw.write(&quot;      - resources:\n&quot;);&#10;dfw.write(&quot;        name: &quot;+name+&quot;\n&quot;);&#10;dfw.write(&quot;        image: &quot;+image+&quot;\n&quot;);&#10;dfw.write(&quot;        ports:\n&quot;);&#10;dfw.write(&quot;        - name: cars-port\n&quot;);&#10;dfw.write(&quot;          containerPort: &quot;+port+&quot;\n&quot;);&#10;dfw.write(&quot;      imagePullSecrets:\n&quot;);&#10;dfw.write(&quot;      - name: team1key\n&quot;);&#10;dfw.close();&#10;&#10;var deploy = kubectl + &quot; create -f &quot; + deploymentFileName;&#10;print(deploy);&#10;$EXEC(deploy);&#10;print($OUT);&#10;print($ERR);&#10;&#10;var deleteService = kubectl + &quot; delete service &quot; + name;&#10;print(deleteService);&#10;$EXEC(deleteService);&#10;print($OUT);&#10;print($ERR);&#10;&#10;var sfw = new FileWriter(serviceFileName);&#10;sfw.write(&quot;apiVersion: v1\n&quot;);&#10;sfw.write(&quot;kind: Service\n&quot;);&#10;sfw.write(&quot;metadata:\n&quot;);&#10;sfw.write(&quot;  name: &quot;+name+&quot;\n&quot;);&#10;sfw.write(&quot;  labels:\n&quot;);&#10;sfw.write(&quot;    name: &quot;+name+&quot;\n&quot;);&#10;sfw.write(&quot;spec:\n&quot;);&#10;sfw.write(&quot;  ports:\n&quot;);&#10;sfw.write(&quot;  - port: 8088\n&quot;);&#10;sfw.write(&quot;    targetPort: &quot;+port+&quot;\n&quot;);&#10;sfw.write(&quot;    nodePort: &quot;+nodePort+&quot;\n&quot;);&#10;sfw.write(&quot;  selector:\n&quot;);&#10;sfw.write(&quot;    name: &quot;+name+&quot;\n&quot;);&#10;sfw.write(&quot;  type: NodePort\n&quot;);&#10;sfw.close();&#10;&#10;var deployService = kubectl + &quot; create -f &quot; + serviceFileName;&#10;print(deployService);&#10;$EXEC(deployService);&#10;print($OUT);&#10;print($ERR);&#10;&#10;var testUrl = &quot;curl --write-out %{http_code} --silent --output /dev/null http://team1.disruptor.ninja:31080/cars/resources/cars --max-time 2&quot;;&#10;$EXEC(testUrl);&#10;while ($OUT != &quot;200&quot;) {&#10;    $EXEC(&quot;sleep 1&quot;);&#10;    $EXEC(testUrl);&#10;    print($OUT);&#10;}" description="Script to start the test environment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>
<templateSet group="user">
  <template name="rulz" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;com.airhacks.rulz&lt;/groupId&gt;&#10;    &lt;artifactId&gt;jaxrsclient&lt;/artifactId&gt;&#10;    &lt;version&gt;0.0.1&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Rulez Test Framework" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jerseyclient" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;org.glassfish.jersey.core&lt;/groupId&gt;&#10;    &lt;artifactId&gt;jersey-client&lt;/artifactId&gt;&#10;    &lt;version&gt;2.12&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Jersey Client Dependency" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="arquillianDM" value="&lt;dependencyManagement&gt;&#10;    &lt;dependencies&gt;&#10;        &lt;dependency&gt;&#10;            &lt;groupId&gt;org.jboss.arquillian&lt;/groupId&gt;&#10;            &lt;artifactId&gt;arquillian-bom&lt;/artifactId&gt;&#10;            &lt;version&gt;1.1.10.Final&lt;/version&gt;&#10;            &lt;scope&gt;import&lt;/scope&gt;&#10;            &lt;type&gt;pom&lt;/type&gt;&#10;        &lt;/dependency&gt;&#10;    &lt;/dependencies&gt;&#10;&lt;/dependencyManagement&gt;" description="Arquillian DependencyManagement" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="arquillian" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;org.jboss.arquillian.junit&lt;/groupId&gt;&#10;    &lt;artifactId&gt;arquillian-junit-container&lt;/artifactId&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;&#10;&lt;dependency&gt;&#10;    &lt;groupId&gt;org.jboss.arquillian.graphene&lt;/groupId&gt;&#10;    &lt;artifactId&gt;arquillian-graphene&lt;/artifactId&gt;&#10;    &lt;type&gt;pom&lt;/type&gt;&#10;    &lt;version&gt;2.1.0.Alpha3&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Arquillian Dependencies" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jmeterplugin" value="&lt;plugin&gt;&#10;  &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;&#10;  &lt;artifactId&gt;jmeter-maven-plugin&lt;/artifactId&gt;&#10;  &lt;version&gt;2.0.3&lt;/version&gt;&#10;  &lt;configuration&gt;&#10;    &lt;propertiesUser&gt;&#10;      &lt;host&gt;${performancetest.webservice.host}&lt;/host&gt;&#10;      &lt;port&gt;${performancetest.webservice.port}&lt;/port&gt;&#10;    &lt;/propertiesUser&gt;&#10;  &lt;/configuration&gt;&#10;  &lt;executions&gt;&#10;    &lt;execution&gt;&#10;      &lt;id&gt;jmeter-tests&lt;/id&gt;&#10;      &lt;goals&gt;&#10;        &lt;goal&gt;jmeter&lt;/goal&gt;&#10;      &lt;/goals&gt;&#10;    &lt;/execution&gt;&#10;  &lt;/executions&gt;&#10;&lt;/plugin&gt;&#10;&lt;plugin&gt;&#10;  &lt;groupId&gt;com.lazerycode.jmeter&lt;/groupId&gt;&#10;  &lt;artifactId&gt;jmeter-analysis-maven-plugin&lt;/artifactId&gt;&#10;  &lt;version&gt;1.0.6&lt;/version&gt;&#10;  &lt;executions&gt;&#10;    &lt;execution&gt;&#10;      &lt;goals&gt;&#10;        &lt;goal&gt;analyze&lt;/goal&gt;&#10;      &lt;/goals&gt;&#10;      &lt;phase&gt;post-integration-test&lt;/phase&gt;&#10;    &lt;/execution&gt;&#10;  &lt;/executions&gt;&#10;  &lt;configuration&gt;&#10;    &lt;source&gt;${project.build.directory}/jmeter/results/*&lt;/source&gt;&#10;    &lt;targetDirectory&gt;${project.build.directory}/reports&lt;/targetDirectory&gt;&#10;  &lt;/configuration&gt;&#10;&lt;/plugin&gt;" description="JMeter Plugins" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="jmeterproperties" value="&lt;performancetest.webservice.host&gt;localhost&lt;/performancetest.webservice.host&gt;&#10;&lt;performancetest.webservice.port&gt;8282&lt;/performancetest.webservice.port&gt;" description="JMeter Properties" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="starttestenv" value="#!/usr/bin/jjs -fv&#10;&#10;var FileWriter = Java.type(&quot;java.io.FileWriter&quot;);&#10;&#10;var version = $ENV.VERSION;&#10;var kubectl = $ENV.KUBECTL;&#10;&#10;var name = &quot;battleapp-test&quot;;&#10;var image = &quot;disruptor.ninja:30500/robertbrem/battleapp:&quot; + version;&#10;var replicas = 1;&#10;var port = 8080;&#10;var clusterPort = 8088;&#10;var nodePort = 31080;&#10;var deploymentFileName = &quot;deployment.yml&quot;;&#10;var serviceFileName = &quot;service.yml&quot;;&#10;var registrysecret = &quot;registrykey&quot;;&#10;var url = &quot;http://disruptor.ninja:31080/battleapp/resources/users&quot;;&#10;var timeout = 2;&#10;&#10;var deleteDeployment = kubectl + &quot; delete deployment &quot; + name;&#10;execute(deleteDeployment);&#10;&#10;var dfw = new FileWriter(deploymentFileName);&#10;dfw.write(&quot;apiVersion: extensions/v1beta1\n&quot;);&#10;dfw.write(&quot;kind: Deployment\n&quot;);&#10;dfw.write(&quot;metadata:\n&quot;);&#10;dfw.write(&quot;  name: &quot; + name + &quot;\n&quot;);&#10;dfw.write(&quot;spec:\n&quot;);&#10;dfw.write(&quot;  replicas: &quot; + replicas + &quot;\n&quot;);&#10;dfw.write(&quot;  template:\n&quot;);&#10;dfw.write(&quot;    metadata:\n&quot;);&#10;dfw.write(&quot;      labels:\n&quot;);&#10;dfw.write(&quot;        name: &quot; + name + &quot;\n&quot;);&#10;dfw.write(&quot;    spec:\n&quot;);&#10;dfw.write(&quot;      containers:\n&quot;);&#10;dfw.write(&quot;      - resources:\n&quot;);&#10;dfw.write(&quot;        name: &quot; + name + &quot;\n&quot;);&#10;dfw.write(&quot;        image: &quot; + image + &quot;\n&quot;);&#10;dfw.write(&quot;        ports:\n&quot;);&#10;dfw.write(&quot;        - name: port\n&quot;);&#10;dfw.write(&quot;          containerPort: &quot; + port + &quot;\n&quot;);&#10;dfw.write(&quot;      imagePullSecrets:\n&quot;);&#10;dfw.write(&quot;      - name: &quot; + registrysecret + &quot;\n&quot;);&#10;dfw.close();&#10;&#10;var deploy = kubectl + &quot; create -f &quot; + deploymentFileName;&#10;execute(deploy);&#10;&#10;var deleteService = kubectl + &quot; delete service &quot; + name;&#10;execute(deleteService);&#10;&#10;var sfw = new FileWriter(serviceFileName);&#10;sfw.write(&quot;apiVersion: v1\n&quot;);&#10;sfw.write(&quot;kind: Service\n&quot;);&#10;sfw.write(&quot;metadata:\n&quot;);&#10;sfw.write(&quot;  name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;  labels:\n&quot;);&#10;sfw.write(&quot;    name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;spec:\n&quot;);&#10;sfw.write(&quot;  ports:\n&quot;);&#10;sfw.write(&quot;  - port: &quot; + clusterPort + &quot;\n&quot;);&#10;sfw.write(&quot;    targetPort: &quot; + port + &quot;\n&quot;);&#10;sfw.write(&quot;    nodePort: &quot; + nodePort + &quot;\n&quot;);&#10;sfw.write(&quot;  selector:\n&quot;);&#10;sfw.write(&quot;    name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;  type: NodePort\n&quot;);&#10;sfw.close();&#10;&#10;var deployService = kubectl + &quot; create -f &quot; + serviceFileName;&#10;execute(deployService);&#10;&#10;var testUrl = &quot;curl --write-out %{http_code} --silent --output /dev/null &quot; + url + &quot; --max-time &quot; + timeout;&#10;execute(testUrl);&#10;while ($OUT != &quot;200&quot;) {&#10;    $EXEC(&quot;sleep 1&quot;);&#10;    execute(testUrl);&#10;}&#10;&#10;&#10;function execute(command) {&#10;    $EXEC(command);&#10;    print($OUT);&#10;    print($ERR);&#10;}" description="Script to start the test environment" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="canary" value="#!/usr/bin/jjs -fv&#10;&#10;var FileWriter = Java.type(&quot;java.io.FileWriter&quot;);&#10;&#10;var version = $ENV.VERSION;&#10;var kubectl = $ENV.KUBECTL;&#10;&#10;var name = &quot;battleapp&quot;;&#10;var nameWithVersion = name + &quot;-&quot; + version;&#10;var image = &quot;disruptor.ninja:30500/robertbrem/battleapp:&quot; + version;&#10;var replicas = 1;&#10;var port = 8080;&#10;var clusterPort = 8880;&#10;var nodePort = 30080;&#10;var deploymentFileName = &quot;deployment.yml&quot;;&#10;var serviceFileName = &quot;service.yml&quot;;&#10;var registrysecret = &quot;registrykey&quot;;&#10;var relativeUrl = &quot;/battleapp/resources/users&quot;;&#10;var url = &quot;http://disruptor.ninja:&quot; + nodePort + relativeUrl;&#10;var timeout = 2;&#10;var initialDelay = 15;&#10;var readinessProbeTimeout = 10;&#10;&#10;var dfw = new FileWriter(deploymentFileName);&#10;dfw.write(&quot;apiVersion: extensions/v1beta1\n&quot;);&#10;dfw.write(&quot;kind: Deployment\n&quot;);&#10;dfw.write(&quot;metadata:\n&quot;);&#10;dfw.write(&quot;  name: &quot; + nameWithVersion + &quot;\n&quot;);&#10;dfw.write(&quot;spec:\n&quot;);&#10;dfw.write(&quot;  replicas: &quot; + replicas + &quot;\n&quot;);&#10;dfw.write(&quot;  template:\n&quot;);&#10;dfw.write(&quot;    metadata:\n&quot;);&#10;dfw.write(&quot;      labels:\n&quot;);&#10;dfw.write(&quot;        name: &quot; + name + &quot;\n&quot;);&#10;dfw.write(&quot;        version: &quot; + version + &quot;\n&quot;);&#10;dfw.write(&quot;    spec:\n&quot;);&#10;dfw.write(&quot;      containers:\n&quot;);&#10;dfw.write(&quot;      - resources:\n&quot;);&#10;dfw.write(&quot;        name: &quot; + name + &quot;\n&quot;);&#10;dfw.write(&quot;        image: &quot; + image + &quot;\n&quot;);&#10;dfw.write(&quot;        ports:\n&quot;);&#10;dfw.write(&quot;        - name: port\n&quot;);&#10;dfw.write(&quot;          containerPort: &quot; + port + &quot;\n&quot;);&#10;dfw.write(&quot;        readinessProbe:\n&quot;);&#10;dfw.write(&quot;          httpGet:\n&quot;);&#10;dfw.write(&quot;            path: &quot; + relativeUrl + &quot;\n&quot;);&#10;dfw.write(&quot;            port: &quot; + port + &quot;\n&quot;);&#10;dfw.write(&quot;          initialDelaySeconds: &quot; + initialDelay + &quot;\n&quot;);&#10;dfw.write(&quot;          timeoutSeconds: &quot; + readinessProbeTimeout + &quot;\n&quot;);&#10;dfw.write(&quot;      imagePullSecrets:\n&quot;);&#10;dfw.write(&quot;      - name: &quot; + registrysecret + &quot;\n&quot;);&#10;dfw.close();&#10;&#10;var deploy = kubectl + &quot; create -f &quot; + deploymentFileName;&#10;execute(deploy);&#10;&#10;var sfw = new FileWriter(serviceFileName);&#10;sfw.write(&quot;apiVersion: v1\n&quot;);&#10;sfw.write(&quot;kind: Service\n&quot;);&#10;sfw.write(&quot;metadata:\n&quot;);&#10;sfw.write(&quot;  name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;  labels:\n&quot;);&#10;sfw.write(&quot;    name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;spec:\n&quot;);&#10;sfw.write(&quot;  ports:\n&quot;);&#10;sfw.write(&quot;  - port: &quot; + clusterPort + &quot;\n&quot;);&#10;sfw.write(&quot;    targetPort: &quot; + port + &quot;\n&quot;);&#10;sfw.write(&quot;    nodePort: &quot; + nodePort + &quot;\n&quot;);&#10;sfw.write(&quot;  selector:\n&quot;);&#10;sfw.write(&quot;    name: &quot; + name + &quot;\n&quot;);&#10;sfw.write(&quot;  type: NodePort\n&quot;);&#10;sfw.close();&#10;&#10;var deployService = kubectl + &quot; create -f &quot; + serviceFileName;&#10;execute(deployService);&#10;&#10;var testUrl = &quot;curl --write-out %{http_code} --silent --output /dev/null &quot; + url + &quot; --max-time &quot; + timeout;&#10;execute(testUrl);&#10;while ($OUT != &quot;200&quot;) {&#10;    $EXEC(&quot;sleep 1&quot;);&#10;    execute(testUrl);&#10;}&#10;&#10;function execute(command) {&#10;    $EXEC(command);&#10;    print($OUT);&#10;    print($ERR);&#10;}" description="Deploy a canary" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
  <template name="component" value="@Component({&#10;  selector: 'battleapp-user',&#10;  templateUrl: './users.component.html',&#10;  styleUrls: ['./users.component.css'],&#10;  providers: [UserService],&#10;})&#10;export class UserComponent {&#10;  private users: User[];&#10;&#10;  constructor(private usersService: UserService) {&#10;  }&#10;&#10;  ngOnInit() {&#10;    this.getPlayers();&#10;  }&#10;&#10;  private getPlayers() {&#10;    this.usersService&#10;      .getAll()&#10;      .subscribe((data: User[]) =&gt; {&#10;          this.users = data;&#10;        },&#10;        error =&gt; console.log(error),&#10;        () =&gt; console.log('Users loaded!!')&#10;      );&#10;  };&#10;&#10;}&#10;" description="TypeScript component" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="webxml" value="&lt;web-app xmlns=&quot;http://java.sun.com/xml/ns/javaee&quot;&#10;         xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;         xsi:schemaLocation=&quot;http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd&quot;&#10;         version=&quot;3.0&quot;&gt;&#10;&#10;    &lt;security-constraint&gt;&#10;        &lt;web-resource-collection&gt;&#10;            &lt;web-resource-name&gt;health&lt;/web-resource-name&gt;&#10;            &lt;url-pattern&gt;/resources/health&lt;/url-pattern&gt;&#10;        &lt;/web-resource-collection&gt;&#10;        &lt;!-- OMIT auth-constraint --&gt;&#10;    &lt;/security-constraint&gt;&#10;&#10;    &lt;security-constraint&gt;&#10;        &lt;web-resource-collection&gt;&#10;            &lt;web-resource-name&gt;cors&lt;/web-resource-name&gt;&#10;            &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&#10;            &lt;http-method&gt;GET&lt;/http-method&gt;&#10;            &lt;http-method&gt;POST&lt;/http-method&gt;&#10;            &lt;http-method&gt;PUT&lt;/http-method&gt;&#10;            &lt;http-method&gt;DELETE&lt;/http-method&gt;&#10;        &lt;/web-resource-collection&gt;&#10;        &lt;auth-constraint&gt;&#10;            &lt;role-name&gt;user&lt;/role-name&gt;&#10;        &lt;/auth-constraint&gt;&#10;    &lt;/security-constraint&gt;&#10;&#10;    &lt;login-config&gt;&#10;        &lt;auth-method&gt;KEYCLOAK&lt;/auth-method&gt;&#10;        &lt;realm-name&gt;this is ignored currently&lt;/realm-name&gt;&#10;    &lt;/login-config&gt;&#10;&#10;    &lt;security-role&gt;&#10;        &lt;role-name&gt;admin&lt;/role-name&gt;&#10;    &lt;/security-role&gt;&#10;    &lt;security-role&gt;&#10;        &lt;role-name&gt;user&lt;/role-name&gt;&#10;    &lt;/security-role&gt;&#10;&lt;/web-app&gt;" description="Web.xml example with keycloak" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="XML" value="true" />
    </context>
  </template>
  <template name="keycloakadapter" value="&lt;dependency&gt;&#10;    &lt;groupId&gt;org.keycloak&lt;/groupId&gt;&#10;    &lt;artifactId&gt;keycloak-wildfly-adapter&lt;/artifactId&gt;&#10;    &lt;version&gt;2.4.0.Final&lt;/version&gt;&#10;    &lt;scope&gt;test&lt;/scope&gt;&#10;&lt;/dependency&gt;" description="Dependencies for Keycloak Adapter used in tests" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="MAVEN" value="true" />
    </context>
  </template>
  <template name="keycloakheader" value=".header(&quot;Authorization&quot;, &quot;Bearer &quot; + getTokenResponse(&quot;admin&quot;, &quot;admin&quot;).getToken())" description="header for keycloak test" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="keycloakcreator" value="import org.apache.http.HttpEntity;&#10;import org.apache.http.HttpResponse;&#10;import org.apache.http.NameValuePair;&#10;import org.apache.http.client.HttpClient;&#10;import org.apache.http.client.entity.UrlEncodedFormEntity;&#10;import org.apache.http.client.methods.HttpPost;&#10;import org.apache.http.message.BasicNameValuePair;&#10;import org.keycloak.OAuth2Constants;&#10;import org.keycloak.adapters.HttpClientBuilder;&#10;import org.keycloak.common.util.KeycloakUriBuilder;&#10;import org.keycloak.constants.ServiceUrlConstants;&#10;import org.keycloak.representations.AccessTokenResponse;&#10;import org.keycloak.util.JsonSerialization;&#10;&#10;import java.io.IOException;&#10;import java.io.InputStream;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class KeycloakHeaderCreater {&#10;&#10;    public static final String CLIENT_ID = &quot;battleapp-frontend&quot;;&#10;    public static final String REALM = &quot;battleapp-test&quot;;&#10;    public static final String KEYCLOAK_URL = &quot;https://disruptor.ninja:30182/auth&quot;;&#10;&#10;    public static AccessTokenResponse getTokenResponse(String user, String password) throws IOException {&#10;        HttpClient client = new HttpClientBuilder().disableTrustManager().build();&#10;        try {&#10;            HttpPost post = new HttpPost(KeycloakUriBuilder.fromUri(KEYCLOAK_URL)&#10;                    .path(ServiceUrlConstants.TOKEN_PATH).build(REALM));&#10;            List&lt;NameValuePair&gt; formparams = new ArrayList&lt;&gt;();&#10;            formparams.add(new BasicNameValuePair(OAuth2Constants.GRANT_TYPE, &quot;password&quot;));&#10;            formparams.add(new BasicNameValuePair(&quot;username&quot;, user));&#10;            formparams.add(new BasicNameValuePair(&quot;password&quot;, password));&#10;&#10;            formparams.add(new BasicNameValuePair(OAuth2Constants.CLIENT_ID, CLIENT_ID));&#10;&#10;            UrlEncodedFormEntity form = new UrlEncodedFormEntity(formparams, &quot;UTF-8&quot;);&#10;            post.setEntity(form);&#10;            HttpResponse response = client.execute(post);&#10;            int status = response.getStatusLine().getStatusCode();&#10;            HttpEntity entity = response.getEntity();&#10;            if (status != 200) {&#10;                throw new IOException(&quot;Bad status: &quot; + status);&#10;            }&#10;            if (entity == null) {&#10;                throw new IOException(&quot;No Entity&quot;);&#10;            }&#10;            InputStream is = entity.getContent();&#10;            try {&#10;                AccessTokenResponse tokenResponse = JsonSerialization.readValue(is, AccessTokenResponse.class);&#10;                return tokenResponse;&#10;            } finally {&#10;                try {&#10;                    is.close();&#10;                } catch (IOException ignored) {&#10;                }&#10;            }&#10;        } finally {&#10;            client.getConnectionManager().shutdown();&#10;        }&#10;    }&#10;&#10;}&#10;" description="Keycloak creator for testing" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_CODE" value="true" />
    </context>
  </template>
  <template name="configmap" value="dfw.write(&quot;        volumeMounts:\n&quot;);&#10;dfw.write(&quot;        - name: dist\n&quot;);&#10;dfw.write(&quot;          mountPath: /usr/share/nginx/html/keycloak\n&quot;);&#10;dfw.write(&quot;      volumes:\n&quot;);&#10;dfw.write(&quot;      - name: dist\n&quot;);&#10;dfw.write(&quot;        configMap:\n&quot;);&#10;dfw.write(&quot;          name: battleapp-frontend-test\n&quot;);&#10;dfw.write(&quot;          items:\n&quot;);&#10;dfw.write(&quot;          - key: keycloak.json\n&quot;);&#10;dfw.write(&quot;            path: keycloak.json\n&quot;);" description="Add a config map to a nashorn script" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="JAVA_SCRIPT" value="true" />
    </context>
  </template>
</templateSet>